import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image
import io

MODEL_PATH = 'models/rice_model_fast.h5' 
IMAGE_SIZE = (64, 64)
CLASS_NAMES = [
    'Class 01', 'Class 02', 'Class 03', 'Class 04', 'Class 05', 
    'Class 06', 'Class 07', 'Class 08', 'Class 09', 'Class 10'
] 

@st.cache_resource
def load_rice_model():
    try:
        model = tf.keras.models.load_model(MODEL_PATH)
        return model
    except Exception as e:
        st.error(f"L·ªói t·∫£i m√¥ h√¨nh: Vui l√≤ng ki·ªÉm tra file {MODEL_PATH} ƒë√£ ƒë∆∞·ª£c ƒë·∫©y l√™n GitHub ch∆∞a.")
        st.code(f"Chi ti·∫øt l·ªói: {e}")
        return None

def predict_image(image_file, model, class_names, img_size):
    try:
        img = Image.open(image_file).convert('RGB').resize(img_size)
        
        img_array = tf.keras.preprocessing.image.img_to_array(img)
        
        img_array_expanded = np.expand_dims(img_array, axis=0)
        
        img_array_expanded = img_array_expanded / 255.0 

        predictions = model.predict(img_array_expanded)[0] # L·∫•y m·∫£ng x√°c su·∫•t 1D
        
        predicted_class_index = np.argmax(predictions)
        confidence = np.max(predictions)

        # L·∫•y top 3 d·ª± ƒëo√°n
        top_k_indices = np.argsort(predictions)[::-1][:3]
        top_k_results = [(class_names[i], predictions[i]) for i in top_k_indices]
        
        return class_names[predicted_class_index], confidence, top_k_results

    except Exception as e:
        st.error(f"L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω ·∫£nh ho·∫∑c d·ª± ƒëo√°n: {e}")
        return "L·ªói x·ª≠ l√Ω", 0.0, []

model = load_rice_model()

st.set_page_config(page_title="Ph√¢n Lo·∫°i G·∫°o CNN", layout="centered")

st.title("üçö ·ª®ng D·ª•ng Ph√¢n Lo·∫°i G·∫°o T·ª± ƒê·ªông (M√¥ h√¨nh CNN)")
st.caption(f"Ki·∫øn tr√∫c CNN ƒë√£ hu·∫•n luy·ªán, K√≠ch th∆∞·ªõc ·∫£nh: {IMAGE_SIZE[0]}x{IMAGE_SIZE[1]} pixels.")

if model is not None:
    uploaded_file = st.file_uploader("T·∫£i l√™n ·∫£nh h·∫°t g·∫°o ƒë·ªÉ ph√¢n lo·∫°i...", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        st.image(uploaded_file, caption='·∫¢nh G·∫°o ƒê√£ T·∫£i L√™n', width=200)
        
        if st.button('Ph√¢n Lo·∫°i H·∫°t G·∫°o'):
            with st.spinner('ƒêang x·ª≠ l√Ω v√† d·ª± ƒëo√°n...'):
                
                # C·∫≠p nh·∫≠t: H√†m predict_image gi·ªù tr·∫£ v·ªÅ top_k_results
                predicted_name, confidence, top_k_results = predict_image(uploaded_file, model, CLASS_NAMES, IMAGE_SIZE)
                
                if predicted_name != "L·ªói x·ª≠ l√Ω":
                    st.success(f"‚úÖ D·ª± ƒëo√°n Th√†nh C√¥ng!")
                    st.markdown("---")
                    st.markdown(f"**K·∫øt qu·∫£ Ph√¢n lo·∫°i:** <span style='color:green; font-size: 20px;'>{predicted_name}</span>", unsafe_allow_html=True)
                    st.markdown(f"**ƒê·ªô tin c·∫≠y:** **{confidence:.2%}**")
                    st.markdown("---")
                    
                    # HI·ªÇN TH·ªä C√ÅC K·∫æT QU·∫¢ X√ÅC SU·∫§T CAO KH√ÅC
                    st.subheader("Ph√¢n t√≠ch X√°c su·∫•t:")
                    for name, conf in top_k_results:
                        st.text(f"- {name}: {conf:.2%}")
else:
    st.error("·ª®ng d·ª•ng kh√¥ng th·ªÉ kh·ªüi ƒë·ªông v√¨ m√¥ h√¨nh kh√¥ng ƒë∆∞·ª£c t·∫£i. Vui l√≤ng ki·ªÉm tra file rice_model_fast.h5 v√† log  s deploy.")